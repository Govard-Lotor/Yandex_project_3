import discord
from discord.ext import commands
import logging
import datetime as dt
import time
from random import randint
import pymorphy2
import math

logger = logging.getLogger('discord')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–∏—Å–∫–æ—Ä–¥ –±–æ—Ç–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='!',
                   intents=intents)  # –°—Ç–∞–≤–∏–º –ø—Ä–µ—Ñ–∏–∫—Å –±–æ—Ç—É - —Å–∏–º–≤–æ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã


@bot.command(
    name='time')  # 1 —Ñ—É–Ω–∫—Ü–∏—è - —Ç–∞–π–º–µ—Ä. –ú–æ–∂–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥,
# –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Ñ—Ä–∞–∑—É 'Time X is Over' –∏ –∑–∞–∫–æ–Ω—á–∏—Ç —Ä–∞–±–æ—Ç—É.
async def time(s, minutes, seconds):
    delta_time = dt.timedelta(minutes=float(minutes), seconds=float(seconds))
    t = delta_time.seconds
    time.sleep(t)
    await s.send(f'Time X is Over')


@bot.command(name='random')  # 2 —Ñ—É–Ω–∫—Ü–∏—è - —Ä–∞–Ω–¥–æ–º. –í—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
async def random(s, ch_min, ch_max):
    if int(ch_min) < int(ch_max):
        k = randint(int(ch_min), int(ch_max))
    else:
        k = randint(int(ch_max), int(ch_min))
    await s.send(k)


@bot.command(name='massive')  # 3 —Ñ—É–Ω–∫—Ü–∏—è - –º–∞—Å—Å–∏–≤ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —á–∏—Å–µ–ª.
async def massive(s, st, ch_min, ch_max):
    list_k = []
    if ch_min < ch_max:
        for i in range(int(st)):
            list_k.append(randint(int(ch_min), int(ch_max)))
    else:
        for i in range(int(st)):
            list_k.append(randint(int(ch_max), int(ch_min)))
    await s.send(list_k)


@bot.command(name='eval')  # 4 —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
async def ev_al(s, *args):
    list_k = []
    for i in args:
        list_k.append(i)
    k = ' '.join(list_k)
    await s.send(eval(k))


@bot.command(name='char')  # 5 —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ chr –ø–æ –Ω–æ–º–µ—Ä—É
async def char(s, ch):
    k = chr(int(ch))
    await s.send(k)


@bot.command(name='cat')  # 6 —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–≤–æ–¥–∏—Ç –∫–æ—Ç–∞
async def cat(s):
    k1 = chr(ord('„Éï'))
    k2 = chr(ord('Ôºû'))
    k3 = chr(ord('‚óï'))
    k4 = chr(ord('`'))
    k5 = chr(ord('„Éü'))
    k6 = chr(ord('x'))
    k7 = chr(ord('ÂΩ°'))
    k8 = chr(ord('„ÉΩ'))
    k9 = chr(ord('Ôæâ'))
    k10 = chr(ord('Ôø£'))
    k11 = chr(ord('„ÉΩ'))
    k12 = chr(ord('‰∫å'))
    k13 = chr(ord('„Å§'))
    t1 = f'.                    Ôºè{k2}„ÄÄÔºè{k1}'
    t2 = f'.„ÄÄ„ÄÄ„ÄÄ„ÄÄ| „ÄÄ{k3} {k3} |'
    t3 = f'.„ÄÄ „ÄÄ„ÄÄÔºè{k4}{k5}  {k6} {k7}'
    t4 = f'.„ÄÄ„ÄÄ  /„ÄÄ„ÄÄ„ÄÄ „ÄÄ |'
    t5 = f'.„ÄÄ„ÄÄ /„ÄÄ {k8}„ÄÄ„ÄÄ {k9}'
    t6 = f'.Ôºè{k10}|„ÄÄ„ÄÄ |„ÄÄ|„ÄÄ |'
    t7 = f'.| ({k10}{k11}Ôºø{k11})  {k11}Ôºø{k11})'
    t8 = f'.ÔººÔºº{k12}{k13}'
    await s.send(t1)
    await s.send(t2)
    await s.send(t3)
    await s.send(t4)
    await s.send(t5)
    await s.send(t6)
    await s.send(t7)
    await s.send(t8)


@bot.command(name='amogus')  # 7 —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–≤–æ–¥–∏—Ç –∞–º–æ–≥—É—Å–∞
async def amo_gus(s):
    k1 = chr(ord('‚¨õ'))
    k2 = chr(ord('üü•'))
    k3 = chr(ord('üü¶'))
    k4 = chr(ord('‚¨ú'))
    k5 = chr(ord('üü™'))
    t1 = f'.                            {k1}{k2}{k2}{k2}{k2}{k2}{k2}{k1}'
    t2 = f'.                      {k1}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k1}'
    t3 = f'.                 {k1}{k2}{k2}{k2}{k2}{k1}{k1}{k1}{k1}{k1}{k1}'
    t4 = f'.                    {k1}{k2}{k2}{k2}{k1}{k3}{k3}{k4}{k4}{k4}{k1}'
    t5 = f'.                 {k1}{k2}{k2}{k1}{k5}{k3}{k3}{k3}{k4}{k4}{k4}{k3}{k1}'
    t6 = f'.      {k1}{k1}{k1}{k2}{k2}{k1}{k5}{k3}{k3}{k3}{k3}{k3}{k3}{k3}{k1}'
    t7 = f'.{k1}{k2}{k2}{k1}{k2}{k2}{k1}{k5}{k5}{k5}{k3}{k3}{k3}{k3}{k5}{k1}'
    t8 = f'.{k1}{k2}{k2}{k1}{k2}{k2}{k2}{k1}{k5}{k5}{k5}{k5}{k5}{k1}'
    t9 = f'.{k1}{k2}{k2}{k1}{k2}{k2}{k2}{k2}{k1}{k1}{k1}{k1}{k1}{k1}{k1}'
    t10 = f'.{k1}{k2}{k2}{k1}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k2}{k1}'
    t11 = f'.{k1}{k2}{k2}'
    await s.send(t1)
    await s.send(t2)
    await s.send(t3)
    await s.send(t4)
    await s.send(t5)
    await s.send(t6)
    await s.send(t7)
    await s.send(t8)
    await s.send(t9)
    await s.send(t10)
    await s.send(t10)
    await s.send(t10)
    await s.send(t10)
    await s.send(t10)
    await s.send(t11)


@bot.command(
    name='maths')  # 8 —Ñ—É–Ω–∫—Ü–∏—è - –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å–∏–Ω—É—Å, –∫–æ—Å–∏–Ω—É—Å, —Ç–∞–Ω–≥–µ–Ω—Å, –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å, –∞—Ä–∫—Å–∏–Ω—É—Å,
# –∞—Ä–∫–∫–æ—Å–∏–Ω—É—Å, –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∏–ª–∏ –∞—Ä–∫–∫–æ—Ç–∞–Ω–≥–µ–Ω—Å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
async def maths(s, arg):
    list_k = []
    j = arg.find('(')
    m = float(arg[j + 1: -1])
    for i in arg:
        if i == '(':
            break
        list_k.append(i)
    k = ''.join(list_k)
    if k == 'sin':  # –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è
        await s.send(round(math.sin(m * math.pi / 180), 3))
    if k == 'cos':
        await s.send(round(math.cos(m * math.pi / 180), 3))
    if k == 'tan':
        await s.send(round(math.tan(m * math.pi / 180), 3))
    if k == 'cot':
        await s.send(1 / round(math.tan(m * math.pi / 180), 3))

    if k == 'asin':
        await s.send(round(math.asin(m) / math.pi * 180, 3))
    if k == 'acos':
        await s.send(round(math.acos(m) / math.pi * 180, 3))
    if k == 'atan':
        await s.send(round(math.atan(m) / math.pi * 180, 3))
    if k == 'acot':
        await s.send(1 / (round(math.atan(m) / math.pi * 180, 3)))


@bot.command(name='nouns')  # 9 —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–≤–æ–¥–∏—Ç –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ" —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
async def nouns(s, *args):
    list_p = []
    for i in args:  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if i != '--' and i != '‚Äî' and i != '-':
            if i[-1] == ',' or i[-1] == '.' or i[-1] == ':' or i[-1] == '!' or i[-1] == '?' or i[-1] == ';':
                sa = i[:-1]
                if sa.lower() not in list_p:
                    list_p.append(sa.lower())
            else:
                if i.lower() not in list_p:
                    list_p.append(i.lower())
    morph = pymorphy2.MorphAnalyzer()
    noun = {}
    for j in list_p:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏" –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö
        p = morph.parse(j)[0]
        if 'NOUN' in p.tag and p.score > 0.5:
            noun[p.normal_form] = noun.get(p.normal_form, 0) + 1
    noun = [x[0] for x in sorted(noun.items(), key=lambda x: (x[1], x[0]), reverse=True)]
    await s.send(noun[:10])


@bot.command(name='skl')  # 10 —Ñ—É–Ω–∫—Ü–∏—è - —Å–∫–ª–æ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ —á–∏—Å–ª–∞–º –∏ –ø–æ–¥–µ–∂–∞–º
async def skl(s, skl_noun):
    morph = pymorphy2.MorphAnalyzer()
    res = morph.parse(skl_noun)[0]  # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –Ω–∏–∂–µ —Å–∫–ª–æ–Ω—è–µ–º
    if 'NOUN' not in res.tag:
        await s.send(f'–ù–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ')
    else:
        await s.send('–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ:')
        await s.send(f'–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"nomn"}).word}')
        await s.send(f'–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"gent"}).word}')
        await s.send(f'–î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"datv"}).word}')
        await s.send(f'–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"accs"}).word}')
        await s.send(f'–¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"ablt"}).word}')
        await s.send(f'–ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"loct"}).word}')
        await s.send(f'–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ:')
        await s.send(f'–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"nomn", "plur"}).word}')
        await s.send(f'–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"gent", "plur"}).word}')
        await s.send(f'–î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"datv", "plur"}).word}')
        await s.send(f'–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"accs", "plur"}).word}')
        await s.send(f'–¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"ablt", "plur"}).word}')
        await s.send(f'–ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂: {res.inflect({"loct", "plur"}).word}')


TOKEN = "MTA4NzY2OTk5NTIwMDMxNTQ1NA.GeCAJf.fH9stF5P3y-JhaMj9y26z_EW1kuNpGqnDxwWfY"
bot.run(TOKEN)
